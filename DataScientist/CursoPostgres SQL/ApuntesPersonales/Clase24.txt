Simulando una conexión a Bases de Datos remotas
Obtener datos de hosts remotos

dblink

Primero debe verificarse que dblink esta instalado ya que es una extension de postgres y no viene por defecto

Crear la extension dblink que postgres incluye pero no instala por defecto, esta extension debe crearse por cada base de datos individual


CREATE EXTENSION dblink;


-- se deberian dejar espacio despues de cada instruccion ya que  son comandos diferentes
SELECT * FROM
dblink('dbname=remota 
  port=5432 
  host=127.0.0.1 
  user=xxxx 
  password=xxxx',
  'SELECT id, fecha FROM vip;')
  AS datos_remotos(id integer, "date" date);

A la query se le debe dar el formato de como llegaran los datos
Haciendo cruce de datos con una tabla local


SELECT * FROM passenger
JOIN 
dblink('dbname=remota 
  port=5432 
  host=127.0.0.1 
  user=xxxx 
  password=xxxxxxx',
'SELECT id, date FROM vip;')
AS datos_remotos(id integer, "date" date)
ON (passenger.id = datos_remotos.id);
Ya que ambas tablas se cruzan por la columna id, el JOIN se puede hacer con USING(id)


SELECT * FROM passenger
JOIN 
dblink('dbname=remota 
  port=5432 
  host=127.0.0.1 
  user=xxxx 
  password=xxxxxxx',
'SELECT id, date FROM vip;')
AS datos_remotos(id integer, "date" date)
USING(id);
Al usar usign id el query retorna solo una columna de id en lugar de ambas columnas lo cual haria si se usara un ON para realizar el JOIN

Reto
query a la tabla de pasageros desde la tabla remota


-- CREATE EXTENSION dblink;
SELECT * FROM vip
JOIN 
dblink('dbname=transporte 
  port=5432 
  host=127.0.0.1 
  user=xxxxxxx 
  password=xxxxxxxxxxxx',
'SELECT id, name, address, birthdate FROM passenger;')
AS remote_passenger(id INTEGER, name CHARACTER VARYING, address CHARACTER VARYING, birthdate DATE)
USING(id);


Corrí el script en mi pgAdmin y me arroja un error de sintaxis, y leyendo al docuementación me encontré esto:

HAVING

> The HAVING clause allows us to pick out particular rows where the function’s result meets some condition.

USING

> The USING clause is a shorthand that allows you to take advantage of the specific situation where both sides of the join use the same name for the joining column(s). It takes a comma-separated list of the shared column names and forms a join condition that includes an equality comparison for each one. For example, joining T1 and T2 with USING (a, b) produces the join condition ON T1.a = T2.a AND T1.b = T2.b.



// Reto
SELECT * FROM vip
JOIN
dblink('dbname=transporte
	   port=5432
	   host=127.0.0.1
	   user=casaos
	   password=casaos',
	   'SELECT id,nombre,direccion_residencia,fecha_nacimiento FROM pasajeros')
	   
	   AS datos_remotos (id integer,nombre character varying,direccion_residencia character varying,fecha_nacimiento date)
USING (id)	 